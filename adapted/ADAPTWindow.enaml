#   Copyright 2021 Jonathan Anderson
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

import base64
import yaml

from enaml.image import Image
from enaml.layout.api import (hbox, vbox, spacer)
from enaml.widgets.api import (
    Action,
    ActionGroup,
    CheckBox,
    Container,
    Field,
    FileDialogEx,
    Form,
    GroupBox,
    ImageView,
    Label,
    MainWindow,
    Menu,
    MenuBar,
    MultilineField,
    PushButton,
    ToolBar,
    Field
)

from enaml.stdlib.message_box import critical

import icons


enamldef FileActions(ActionGroup):
    attr main : MainWindow

    Action:
        text = 'Load &configuration'
        icon = icons.load('configure')
        triggered :: main.load_configuration(main.update_system_config)

    Action:
        text = '&Login\tCtrl+L'
        icon = icons.load('preferences-contact-list')
        triggered :: main.load_configuration(main.update_user)

    Action:
        text = 'Open ADAPT &transaction\tCtrl+O'
        icon = icons.load('document-edit-decrypt-verify')
        triggered :: main.load_configuration(main.update_tx_data)

    Action:
        text = 'Quit\tCtrl+Q'
        icon = icons.load('application-exit')
        enabled << len(mount.mount_point) == 0
        triggered :: main.close()

def gen_constraints(info, buttons, console, show_advanced,audit):
    if not show_advanced:
        return [vbox(info, buttons)]
    return [vbox(info, buttons,audit,console)]

enamldef ADAPTForm(MainWindow): main:
    title = "ADAPT Transaction"
    initial_size = (800,600)
    attr bdb
    attr mount
    attr console_text

    attr adapt
    attr user
    attr asset

    event check_out_bp

    attr show_advanced = False
    attr filePath = "path"

    attr tid = "please enter transaction id"

    func ingest_click():
        print("ingest begins")
        main.asset = adapt.ingest(main.filePath)
        main.tid = asset.id
        print("transaction ID: "+main.asset.id)
        print("ingest ends")

    func retrieve_click():
        print("retrieve begins")
        main.asset = adapt.retrieve(tid)
        main.tid = asset.id
        print("retrieve ends")
        #'''main.asset = adapt.retrieve(tidf.text,user)
        #main.tid = main.asset.id
        #console.text.append()'''

    func commit_click():
        print("commit begins")
        main.asset = adapt.commit(main.filePath, tid)
        main.tid = asset.id
        print("commit ends")
        #'''main.asset = adapt.commit(main.filePath, tidf.text, user)
        #main.tid = main.asset.id'''

    func backtrace_click():
        adapt.backtrace(main.asset,None)

    func foretrace_click():
        adapt.foretrace(main.asset,None)

    func branchtrace_click():
        adapt.branchtrace(main.asset,None)

    func open_file_dialog():
        
        path = FileDialogEx.get_open_file_name()
        l = path.split('/')
        #console_text.text = l[-1]
        main.filePath = l[-1]


    func load_configuration(fn):
        """Load YAML data from a file and pass it to function fn.
        """

        try:
            path = FileDialogEx.get_open_file_name()
            if path:
                with open(path, 'r') as f:
                    fn(yaml.load(f, Loader=yaml.Loader))

        except Exception as e:
            critical(main, f'Error loading {path}', str(e))


    func update_system_config(data):
        root_url.text = data['bigchaindb']['url']
        store.text = data['upss']['block_store']


    func update_user(data):
        pub.text = data['pub']
        priv.text = data['priv']
        user_image.image = Image(data=base64.b64decode(data['image']))


    func update_tx_data(data):
        base_height.text = str(data['block'])



    MenuBar:
        Menu:
            title = '&File'
            FileActions:
                main = main

    ToolBar:
        FileActions:
            main = main

    ToolBar:
        CheckBox:
            checkable = True
            text = "Advanced"
            checked := show_advanced

    Container:
        constraints << gen_constraints(info, buttons,cons, show_advanced,audit)
        GroupBox: info:
            title = "Asset information"
            Container:
                Form:
                    Label: pubkeyl:
                        text = "User"
                    Field: pubkeyf:
                        text << str(main.asset.user)
                        read_only = True
                    Label: hashl:
                        text = "Hash"
                    Field: hashf:
                        text << main.asset.hash
                        read_only = True
                    Label: actionl:
                        text = "Action"
                    Field: acationf:
                        text << main.asset.tx_type
                        read_only = True
                    Label: timestampl:
                        text = "Timestamp"
                    Field: timestampf:
                        text << str(main.asset.timestamp)
                        read_only = True
                    Label: idl:
                        text = "Transaction ID"
                    Field: idf:
                        text << main.asset.id
                        read_only = True
                    Label: prevl:
                        text = "Previous Transaction ID"
                    Field: prevf:
                        text << main.asset.prev
                        read_only = True
                    Label: tagsl:
                        text = "Tags"
                    Field: tagsf:
                        text = str(main.asset.tags)
                        read_only = True
        GroupBox: buttons:
            title = "Action"
            constraints = [hbox(action,system)]
            Container: action: 
                constraints = [vbox(ingest, commit,tidf, retrieve)] #desc
                PushButton: ingest:
                    text = "Ingest"
                    #enabled << len(descrip.text) > 0
                    clicked ::ingest_click()
                    #bdb.commit(new_pointer.text,base_height.text,pub.text,priv.text)
                Field: tidf:
                    text := tid
                PushButton: retrieve:
                    text = "Retrieve"
                    enabled << len(tid) > 0
                    clicked:: retrieve_click()
                PushButton: commit:
                    text = "Commit"
                    enabled << len(tid) > 0
                    clicked:: commit_click()

            Container: system:
                constraints = [vbox(pathl,fileLocation)]
                Label: pathl:
                    text << main.filePath
                PushButton: fileLocation:
                    text = "File Location..."
                    clicked :: open_file_dialog()
        GroupBox: audit:
            title = "Auditing"
            visible << show_advanced
            Container:
                PushButton: backtrace:
                    text = "BackTrace"
                    clicked:: backtrace_click()
                PushButton: foretrace:
                    text = "ForeTrace"
                    clicked:: foretrace_click()
                PushButton: branchtrace:
                    text = "BranchTrace"
                    clicked:: branchtrace_click()
        GroupBox: cons:
            title = "Console"
            visible << False
            Container:
                MultilineField:
                    read_only = True
                    text << console_text.text



'''GroupBox: sys:
            title = "System parameters"
            visible << show_advanced

            Container:
                enabled << len(mount.mount_point) == 0

                Form:
                    Label:
                        text = "BigchainDB"

                    Field: root_url:
                        placeholder = "BigchainDB URL"
                        text := bdb.url

                    Label:
                        text = "Block store"

                    Field: store:
                        placeholder = "/path/to/upss.store"
                        text := mount.store
                        submit_triggers = ['lost_focus', 'return_pressed']'''
'''GroupBox: base:
            title = "Base transaction"
            enabled << len(bdb.url) > 0

            Container:
                Form:
                    Label:
                        text = "Block"

                    Field: base_height:
                        placeholder = "Block height"
                        text ::
                            bp.text = bdb.fetch_bp(change['value'])

                    Label:
                        text = "Block pointer"

                    Field: bp:
                        placeholder = "QlABQiIAAAAAAAABjg..."
                        text := mount.base_pointer
                        submit_triggers = ['lost_focus', 'return_pressed']

                PushButton:
                    text = "Mount"
                    clicked ::
                        try:
                            mount.mount(bp.field_text(), store.field_text())
                        except Exception as e:
                            critical(main, 'Error', f'Failed to mount: {e}')

        GroupBox: mount_details:
            title = "Mount point"
            visible << show_advanced

            Container:
                constraints = [vbox(mnt, mnt_buttons)]
                enabled << len(mount.mount_point) != 0

                Field: mnt:
                    read_only = True
                    text << mount.mount_point or "Not mounted"

                Container: mnt_buttons:
                    constraints = [hbox(spacer, op, unmount)]

                    PushButton: op:
                        text = "Open"
                        clicked :: mount.open_mounted_directory()

                    PushButton: unmount:
                        text = "Unmount" 
                        clicked :: mount.unmount()'''

'''Form: desc:
                    Label:
                        text = "Description"

                    MultilineField: descrip:
                        text = ""'''

'''Form: tx_details:
                    Label:
                        text = "Block pointer"

                    Field: new_pointer:
                        placeholder = "QlABQiIAAAAAAAABjg..."
                        text := mount.new_pointer
                    Label:
                        text = "Public key"

                    Field: pub:
                        placeholder = "Decoded Ed25519 public key"

                    Label:
                        text = "Private key"

                    Field: priv:
                        placeholder = "Decoded Ed25519 private key"
                    ImageView: user_image:
                        scale_to_fit = True
                        preserve_aspect_ratio = True'''